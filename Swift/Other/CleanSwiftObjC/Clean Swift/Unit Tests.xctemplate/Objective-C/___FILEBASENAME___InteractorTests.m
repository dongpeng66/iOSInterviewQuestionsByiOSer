//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright (c) ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

#import <XCTest/XCTest.h>
#import "___VARIABLE_sceneName___Interactor.h"

#pragma mark Test doubles

@interface ___VARIABLE_sceneName___PresentationLogicSpy: NSObject <___VARIABLE_sceneName___PresentationLogic>

@property (nonatomic) BOOL presentSomethingCalled;
- (void)presentSomething:(___VARIABLE_sceneName___DoSomethingResponse *)response;

@end

@implementation ___VARIABLE_sceneName___PresentationLogicSpy

- (void)presentSomething:(___VARIABLE_sceneName___DoSomethingResponse *)response
{
  self.presentSomethingCalled = YES;
}

@end


@interface ___VARIABLE_sceneName___InteractorTests: XCTestCase

@property (strong, nonatomic) ___VARIABLE_sceneName___Interactor* sut;

@end

@implementation ___VARIABLE_sceneName___InteractorTests

#pragma mark Test lifecycle

- (void)setUp
{
  [super setUp];
  [self setup___VARIABLE_sceneName___Interactor];
}

- (void)tearDown
{
  [super tearDown];
}

#pragma mark Test setup

- (void)setup___VARIABLE_sceneName___Interactor
{
  self.sut = [[___VARIABLE_sceneName___Interactor alloc] init];
}

#pragma mark Tests

- (void)testDoSomething
{
  // Given
  ___VARIABLE_sceneName___PresentationLogicSpy *spy = [[___VARIABLE_sceneName___PresentationLogicSpy alloc] init];
  self.sut.presenter = spy;
  ___VARIABLE_sceneName___DoSomethingRequest *request = [[___VARIABLE_sceneName___DoSomethingRequest alloc] init];
  
  // When
  [self.sut doSomething:request];
  
  // Then
  XCTAssertTrue(spy.presentSomethingCalled, @"doSomething: should ask the presenter to format the result");
}

@end
